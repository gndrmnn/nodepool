{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "98387fe6_49a4c492",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 13252
      },
      "writtenOn": "2022-03-18T12:47:21Z",
      "side": 1,
      "message": "Thx for the fix, I reindented the comment after writing it, which obviously was a bad idea.",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c3e5f00_93a1ab16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7118
      },
      "writtenOn": "2022-03-21T00:29:40Z",
      "side": 1,
      "message": "See inline, I think the fact we might be regressing on the RAM calculations should get us to probe a bit deeper on what is really going on here. ",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab235e59_3987959d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 13252
      },
      "writtenOn": "2022-04-26T14:08:49Z",
      "side": 1,
      "message": "recheck aws failures, seems unstable testing",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c798d5ac_39d6cab6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7118
      },
      "writtenOn": "2022-04-26T19:03:33Z",
      "side": 1,
      "message": "hrm, same error in boto3?\n\n File \"/home/zuul/src/opendev.org/zuul/nodepool/.tox/py38/lib/python3.8/site-packages/boto3/resources/factory.py\", line 386, in property_loader\n    return self.meta.data.get(name)\n AttributeError: \u0027NoneType\u0027 object has no attribute \u0027get\u0027\n",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ce31579_055d8ced",
        "filename": "nodepool/driver/openstack/provider.py",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 7118
      },
      "writtenOn": "2022-03-21T00:29:40Z",
      "side": 1,
      "message": "If feel like this doesn\u0027t quite capture what\u0027s going on with the \"vcpus\" probe here.\n\nIt seems that prior to the recent changes, we would get back a flavor object, but that could have \"0\" vcpu\u0027s listed, per [1]:\n\n\"ah, I guess I know now what is happening: vcpus is not set in the tested flavor and as such param is empty. Previously as part of normalization it was set to 0 in such case. This is a tricky one\"\n\nNow, we get back a flavor that doesn\u0027t have a vcpus field if the flavor doesn\u0027t set it.  This raises a few questions:\n\n* The number of VCPU\u0027s doesn\u0027t seem like an optional component of the flavor?\n* How are you supposed to get how many VCPUs a server instance has then?  Is there something else we should use here?\n* If it\u0027s not there, should we assume \"1\"?  This doesn\u0027t seem documented in openstacksdk [2]\n\n[1] https://review.opendev.org/c/openstack/openstacksdk/+/826543\n[2] https://docs.openstack.org/openstacksdk/latest/user/resources/compute/v2/flavor.html#openstack.compute.v2.flavor.Flavor",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58cfb854_2009f458",
        "filename": "nodepool/driver/openstack/provider.py",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 13252
      },
      "writtenOn": "2022-03-21T05:51:55Z",
      "side": 1,
      "message": "The comment in [1] is wrong IMO. Whether we check for \"vcpus\" or \"ram\" or \"swap\" or whatever doesn\u0027t matter, either all of them are there or none. The cases that can happen are:\n\na) Very old sdk or very old nova (not supporting microversion 2.47). In this case \"server.flavor\" will be a dict with only .id and .links and we need to consult our \"flavors\" list in order to get details about the flavor.\n\nb) not-too-old sdk and nova: \"server.flavor\" is a dict containing .vcpus, .ram, etc. and we can simply use these values [3].\n\nc) sdk 1.0: the result from b) will be returned as a Flavor object [2], which synthesizes an .id field from .original_name\n\nThe old code tries to distinguish a) and b) by checking for the presence of .id, which is missing in b). But it mishandles c), trying to use the flavors list with the id seens from the Flavor object, which fails and returns None because \"flavors\" is indexed by the flavor (UU)ID only and not by (original_)name. Also, servers may still be running that were created with a flavor that has since been deleted, so we couldn\u0027t find it in our \"flavors\" list even if we were checking by name instead of id.\nSo by checking for .vcpus we simply bundle b) and c) together, since in both cases we will have both vcpus and ram present in the flavor data.\n\n[3] https://docs.openstack.org/api-ref/compute/?expanded\u003dshow-server-details-detail#show-server-details",
      "parentUuid": "8ce31579_055d8ced",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae403955_e2517edb",
        "filename": "nodepool/driver/openstack/provider.py",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 7118
      },
      "writtenOn": "2022-03-22T23:35:05Z",
      "side": 1,
      "message": "Thanks for the details.  \n\nSo in short, the flavor can never not be filled in for an active server with the more recent sdks.  It\u0027s just the \"id\" field changed with sdk 1.0, confusing our check.",
      "parentUuid": "58cfb854_2009f458",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7edda257_654cd8f6",
        "filename": "nodepool/driver/openstack/provider.py",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 13252
      },
      "writtenOn": "2022-03-23T10:50:56Z",
      "side": 1,
      "message": "At least with recent enough nova, i.e. \u003e\u003d pike, yes. I\u0027m not really sure what sdk 1.0 will produce when running against even older clouds, but I also have no way of testing that and I\u0027m not sure if anyone would still care.\nhttps://docs.openstack.org/nova/latest/reference/api-microversion-history.html#id43\n\nWhat\u0027s really confusing is IMO not the pure existence of the id field, but that it has different content in the server.flavor context compared to the bare flavor context. In essence, these are two similar but not identical objects, so it is questionable for the sdk to use the same object type for both.",
      "parentUuid": "ae403955_e2517edb",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "932a87df_14dc32e2",
        "filename": "nodepool/driver/openstack/provider.py",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 7118
      },
      "writtenOn": "2022-03-21T00:29:40Z",
      "side": 1,
      "message": "In the old case (where vcpu\u0027s would apparently be \"0\" in some cases?), construct_from_flavor() would still account for the RAM.  I am presuming at it could/was/is set, separate to vcpus?  \n\nIt seems now we\u0027re going to skip that too -- which seems wrong.\n\nI\u0027m not sure what to suggest without knowing answers to the above -- how do we really handle a missing \"vcpu\" field?",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0821464_40b12ffe",
        "filename": "nodepool/driver/openstack/provider.py",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 13252
      },
      "writtenOn": "2022-03-21T05:51:55Z",
      "side": 1,
      "message": "Maybe I should make this a different patch then or drop it completely, but this is only going to happen in the case a) above and only in the case that the original flavor has been deleted. The old code would then simply fail, but my idea was that calculating a lower bound for the used quota, skipping servers that we don\u0027t have data for, would be still better than not having any quota information at all.",
      "parentUuid": "932a87df_14dc32e2",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ba48e7c_a9625ea7",
        "filename": "nodepool/driver/openstack/provider.py",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 7118
      },
      "writtenOn": "2022-03-22T23:35:05Z",
      "side": 1,
      "message": "I think then this would be made clear if we did the continue in the branch where we are looking up the flavor, then?  something ~ like\n\n flavor \u003d flavors.get(server.flavor.id)\n # ... only here with old sdk because all modern sdk\u0027s have returned\n # flavor info directly with the server info call ...\n # ... possible the flavor this server is running is has been deleted\n # and isn\u0027t in our cache, therefore skip if we don\u0027t find ...\n continue\n\n?\n\nI agree that execution of this code path is not particularly important.  More interested in making it very clear for future code explorers what the thinking was without having to go through this again! 😊",
      "parentUuid": "a0821464_40b12ffe",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61436545_aaf4a973",
        "filename": "nodepool/driver/openstack/provider.py",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 13252
      },
      "writtenOn": "2022-03-23T10:50:56Z",
      "side": 1,
      "message": "I\u0027m not sure what your intention is with this comment, do you want to change the code or only the comment? Feel free to submit a new PS with your idea, that might make discussing it easier.",
      "parentUuid": "8ba48e7c_a9625ea7",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b27b8a88_1fc18758",
        "filename": "nodepool/driver/openstack/provider.py",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 7118
      },
      "writtenOn": "2022-04-26T05:14:05Z",
      "side": 1,
      "message": "I\u0027m sorry for not getting back to this.  After coming back to this, and re-reading the code again, it seems fine.  We\u0027ll likely get the info (new sdk) or if we don\u0027t (old sdk, unlikely anyway) we\u0027ll look it up and then, in the even more unlikley case, skip over it.  I think this is fine, thanks",
      "parentUuid": "61436545_aaf4a973",
      "revId": "ac3dc8d9fe6fde971c8a4442a4bf6272392c4464",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}