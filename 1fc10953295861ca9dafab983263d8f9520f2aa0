{
  "comments": [
    {
      "key": {
        "uuid": "dada55a8_436a31b4",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 34,
      "author": {
        "id": 2903
      },
      "writtenOn": "2016-07-20T20:01:23Z",
      "side": 1,
      "message": "would it be possible to make this URI-based instead of explicit host/port? I see you\u0027re manually adding the port below?\n\nI\u0027m generally more of a fan of just providing host\u003dXXXX:PORT where possible unless we need special case handling(s).",
      "range": {
        "startLine": 34,
        "startChar": 14,
        "endLine": 34,
        "endChar": 65
      },
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dada55a8_038159c3",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 34,
      "author": {
        "id": 2903
      },
      "writtenOn": "2016-07-20T20:03:20Z",
      "side": 1,
      "message": "No need to change for this, just a question.",
      "parentUuid": "dada55a8_436a31b4",
      "range": {
        "startLine": 34,
        "startChar": 14,
        "endLine": 34,
        "endChar": 65
      },
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dada55a8_08421668",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 47,
      "author": {
        "id": 2903
      },
      "writtenOn": "2016-07-20T20:01:23Z",
      "side": 1,
      "message": "is the chroot (based on your convo w/ josh harlow) the right wa you want to go or would a simple prefix make more sense? I honestly don\u0027t know the pros/cons of either implementation. I tend to err on the side of prefixes since chroots were.. odd when I was looking at this.\n\nThis is more of curiosity than a negative in the current impl.\n\nWe may also want to support a known prefix option as well vs an actual chroot.\n\nprefix\u003d\u0027/junk\u0027, chroot\u003dTrue) or some such.",
      "range": {
        "startLine": 47,
        "startChar": 34,
        "endLine": 47,
        "endChar": 44
      },
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dada55a8_e8ea2273",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 85,
      "author": {
        "id": 2903
      },
      "writtenOn": "2016-07-20T20:01:23Z",
      "side": 1,
      "message": "I like this.",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 85,
        "endChar": 77
      },
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dada55a8_92747068",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 119,
      "author": {
        "id": 1
      },
      "writtenOn": "2016-07-20T22:23:22Z",
      "side": 1,
      "message": "This second handler looks like it would mask most kazoo exceptions.  Is there a reason to do that?  In general, I\u0027d prefer to let exceptions propagate up in their original form to where they can be handled.\n\n(The first handler it could be argued is actually handling the exception, though that\u0027s somewhat predicated on the idea that in some calling context we would handle a timeout from this differently than we would handle any other exception; I\u0027m not sure that will be the case, but it might be, and I don\u0027t anticipate the same loss of debugging context that I do with the second handler.)",
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dada55a8_f20a0c89",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 119,
      "author": {
        "id": 3099
      },
      "writtenOn": "2016-07-20T22:32:20Z",
      "side": 1,
      "message": "Yes, the masking is intentional. If this facade is dealing with all of the kazoo API interactions for the caller, it makes sense to me that those exceptions should be dealt with here as well and something more along the lines of a normal nodepool-defined exception be returned instead. All details of the kazoo API (including exceptions) should be hidden, and the caller never need worry about the kazoo API changing from underneath it.\n\nIs there some reason you\u0027d rather deal directly with the kazoo exceptions? I see no advantage to that off hand.",
      "parentUuid": "dada55a8_92747068",
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dada55a8_d88e0778",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 119,
      "author": {
        "id": 1
      },
      "writtenOn": "2016-07-20T23:26:43Z",
      "side": 1,
      "message": "Yes, though to be clear, I\u0027m not suggesting that we deal with the kazoo exceptions directly outside of the facade, but rather am suggesting that in the case where we are not actually handling them, that we let them remain as-is so that they arrive at our general exception handlers in unmodified form.\n\nAs an operator of a service like this, I have never wanted less information in an exception.  On the contrary, there are many times where we have needed more.  Some day there may be a problem with our ZK cluster and we may need the full traceback to diagnose it (just as in the past there have been problems with clouds we talk to and we need the full traceback to understand what went wrong there).  Or equally the problem may be in Nodepool yet we might not have the information needed to fix it.\n\nExceptions should only be caught at the place where they are handled.  Here they are not being handled (no actual alternate program flow is happening) so this handler is adding not adding value to the system, it only serves to hide information from the caller and operator.\n\nIn a case like this, I would expect this to popagate up to a general exception handler inside the image build routine where it would be caught along with any other exceptions which caused the image to fail to build, logged (in its entirety), and then the image builder would exit (likely to be called again for another attempt in the future).\n\nThe only exception from this I would expect to explicitly handle would be the one corresponding to \"someone else holds the lock\" since after all, that\u0027s a perfectly ordinary condition.  Is that the LockTimeout?  If so, that\u0027s fine -- I don\u0027t think it is subject to my objection here.  I would then expect the builder to handle that exception specially and quietly log that it was unable to acquire the lock and try again later (or whatever is appropriate).",
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dada55a8_9e5c5b4c",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 119,
      "author": {
        "id": 3099
      },
      "writtenOn": "2016-07-21T12:59:07Z",
      "side": 1,
      "message": "Ok, great. Thanks for the explanation. As long as we aren\u0027t directly trying to handle the kazoo exceptions, I can totally get onboard with what you want here. Let me rework it.",
      "parentUuid": "dada55a8_d88e0778",
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dada55a8_68f75259",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 145,
      "author": {
        "id": 2903
      },
      "writtenOn": "2016-07-20T20:01:23Z",
      "side": 1,
      "message": "see above comment.",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 145,
        "endChar": 77
      },
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dada55a8_c3de2110",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 261,
      "author": {
        "id": 2903
      },
      "writtenOn": "2016-07-20T20:01:23Z",
      "side": 1,
      "message": "def _get_image_lock(self, image, blocking\u003dTrue, timeout\u003dNone):\n        if self._current_lock:\n            raise npe.ZKLockException(\"A lock is already held.\")\n\nThis is potentially going to release a lock if you already have one and the exception is raised (erroneously). You\u0027ll need to handle the case where npe.ZKLockException(\"A Lock is already held\") is thrown separately from this finally block.",
      "range": {
        "startLine": 256,
        "startChar": 0,
        "endLine": 261,
        "endChar": 41
      },
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dada55a8_23d0ddf5",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 290,
      "author": {
        "id": 2903
      },
      "writtenOn": "2016-07-20T20:01:23Z",
      "side": 1,
      "message": "same as above.",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 290,
        "endChar": 41
      },
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dada55a8_7271fc75",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 339,
      "author": {
        "id": 1
      },
      "writtenOn": "2016-07-20T22:23:22Z",
      "side": 1,
      "message": "Masked exception.",
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dada55a8_d26a6880",
        "filename": "nodepool/zk.py",
        "patchSetId": 12
      },
      "lineNbr": 409,
      "author": {
        "id": 1
      },
      "writtenOn": "2016-07-20T22:23:22Z",
      "side": 1,
      "message": "Masked exception.",
      "revId": "1fc10953295861ca9dafab983263d8f9520f2aa0",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}