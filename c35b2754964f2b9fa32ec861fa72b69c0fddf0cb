{
  "comments": [
    {
      "key": {
        "uuid": "7a016987_bfd96b24",
        "filename": "nodepool/nodepool.py",
        "patchSetId": 10
      },
      "lineNbr": 698,
      "author": {
        "id": 4220
      },
      "writtenOn": "2015-05-19T05:58:58Z",
      "side": 1,
      "message": "Will this throw a KeyError or just return None if \u0027public_v6\u0027 is not found?",
      "revId": "c35b2754964f2b9fa32ec861fa72b69c0fddf0cb",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a016987_eb98e579",
        "filename": "nodepool/nodepool.py",
        "patchSetId": 10
      },
      "lineNbr": 698,
      "author": {
        "id": 7069
      },
      "writtenOn": "2015-05-22T20:19:34Z",
      "side": 1,
      "message": "You are right, this exception won\u0027t catch anything.",
      "parentUuid": "7a016987_bfd96b24",
      "revId": "c35b2754964f2b9fa32ec861fa72b69c0fddf0cb",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a016987_93751f33",
        "filename": "nodepool/nodepool.py",
        "patchSetId": 10
      },
      "lineNbr": 698,
      "author": {
        "id": 6671
      },
      "writtenOn": "2015-05-23T18:10:56Z",
      "side": 1,
      "message": "if server.get(\u0027public_v6\u0027) and self.provider.ipv6_preferred:\n            ip \u003d server.get(\u0027public_v6\u0027)\n\nthen the previous code in patch 7 was not redundant after all.\n\nit also makes sense to log something when ipv6 address is null but preferred flag set.\nhow about this:\n\nip_v6 \u003d server.get(\u0027public_v6\u0027)\nif self.provider.ipv6_preferred:\n    if ip_v6:\n        ip \u003d ip_v6\n    else:\n        self.log.warning(\u0027preferred ipv6 not available\u0027)",
      "parentUuid": "7a016987_eb98e579",
      "revId": "c35b2754964f2b9fa32ec861fa72b69c0fddf0cb",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a016987_b68e3877",
        "filename": "nodepool/nodepool.py",
        "patchSetId": 10
      },
      "lineNbr": 712,
      "author": {
        "id": 4220
      },
      "writtenOn": "2015-05-19T00:40:47Z",
      "side": 1,
      "message": "If we expect a KeyError if there isn\u0027t a \u0027public_v6\u0027 value in the server object, shouldn\u0027t this be handled differently here?",
      "revId": "c35b2754964f2b9fa32ec861fa72b69c0fddf0cb",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a016987_d64ad425",
        "filename": "nodepool/tests/test_nodepool.py",
        "patchSetId": 10
      },
      "lineNbr": 225,
      "author": {
        "id": 4220
      },
      "writtenOn": "2015-05-19T00:40:47Z",
      "side": 1,
      "message": "Ideally, there should also be test cases for:\n  - asking for ipv6, but there not being an ipv6 available, ensuring we default to the ipv4\n\n  - providing ipv6 and ipv4 values w/o ipv6_preferrred being set, to ensure ipv4 is returned in such a case.  I know this is pedantic and the implementation doesn\u0027t allow for anything else, but it would make tests complete / tests should only verify behavior w/o necessarily knowing implementation details, but I acknowledge this is a nitpicky one.",
      "revId": "c35b2754964f2b9fa32ec861fa72b69c0fddf0cb",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a016987_36d65628",
        "filename": "nodepool/tests/test_nodepool.py",
        "patchSetId": 10
      },
      "lineNbr": 225,
      "author": {
        "id": 6671
      },
      "writtenOn": "2015-05-24T17:36:23Z",
      "side": 1,
      "message": "regarding the first suggestion, the dict population is static right now in https://github.com/openstack-infra/nodepool/blob/master/nodepool/fakeprovider.py#L117. If i want to have positive test case for fake ipv6 address, i have to add one there, so the dict for negative test case can\u0027t be created. do you have any advise?\n\nas for the second, done.\n\nThanks!",
      "parentUuid": "7a016987_d64ad425",
      "revId": "c35b2754964f2b9fa32ec861fa72b69c0fddf0cb",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a016987_79e60145",
        "filename": "nodepool/tests/test_nodepool.py",
        "patchSetId": 10
      },
      "lineNbr": 225,
      "author": {
        "id": 4220
      },
      "writtenOn": "2015-05-24T20:58:01Z",
      "side": 1,
      "message": "Gotcha and apologies for not having addresses that in my initial comment.\n\nPerhaps altering the fakeprovider.py create() method like so:\nThis retains the current behavior, but allows tests to pass in their own dict of addresses to suit their specific needs.  Just a thought.\ndef create(self, **kw):\n         should_fail \u003d kw.get(\u0027SHOULD_FAIL\u0027, \u0027\u0027).lower() \u003d\u003d \u0027true\u0027\n         # Check if the test passes in a specific set of test\n         # addresses, expecting the test to have provided a \n         # properly formated dict if this is the case\n         addresses \u003d kw.get(\u0027provided_addresses\u0027)\n         if not addresses:\n             addresses\u003ddict(\n                 public\u003d[dict(version\u003d4, addr\u003d\u0027fake\u0027)],\n                 public\u003d[dict(version\u003d4, addr\u003d\u0027fake\u0027),\n                         dict(version\u003d6, addr\u003d\u0027fake_v6\u0027)],\n                 private\u003d[dict(version\u003d4, addr\u003d\u0027fake\u0027)]\n             )\n         s \u003d Dummy(id\u003duuid.uuid4().hex,\n                   name\u003dkw[\u0027name\u0027],\n                   status\u003d\u0027BUILD\u0027,\n                   adminPass\u003d\u0027fake\u0027,\n                   addresses\u003daddresses,\n                   metadata\u003d{},\n                   manager\u003dself,\n                   should_fail\u003dshould_fail)\n                   ...",
      "parentUuid": "7a016987_36d65628",
      "revId": "c35b2754964f2b9fa32ec861fa72b69c0fddf0cb",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}