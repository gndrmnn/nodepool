{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9e9a8a92_3d2ea6bb",
        "filename": "nodepool/driver/aws/adapter.py",
        "patchSetId": 9
      },
      "lineNbr": 766,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-15T16:18:47Z",
      "side": 1,
      "message": "We should know the possible instance_types for fleet api requests, right?  If so, we should include all of them here.",
      "revId": "cf34a3a30b4a5b942d727459d2650f8ae3b3e067",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6996f30f_22dd3e21",
        "filename": "nodepool/driver/aws/adapter.py",
        "patchSetId": 9
      },
      "lineNbr": 766,
      "author": {
        "id": 33134
      },
      "writtenOn": "2024-07-16T13:44:46Z",
      "side": 1,
      "message": "The list of `instance_types` is optional in creating fleet API request, user can alternatively or additionally specify `instance-requirements`.\n\nSo it is not guaranteed to know all possible instance_types that the instance could be, but we can make best effort to include the list of `instance_types` here if it is configured.",
      "parentUuid": "9e9a8a92_3d2ea6bb",
      "revId": "cf34a3a30b4a5b942d727459d2650f8ae3b3e067",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39bd2255_e77166f9",
        "filename": "nodepool/driver/aws/adapter.py",
        "patchSetId": 9
      },
      "lineNbr": 766,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-20T15:07:06Z",
      "side": 1,
      "message": "Two questions about that:\n1) Should we actually support instance-requirements?  We don\u0027t do anything like that right now with aws single instances.  But we do have something like that for openstack single instances.  But I\u0027m not sure we should, because if someone isn\u0027t careful, they could end up getting a surprise bill if aws adds a new expensive instance-type that meets your criteria.  So one should always include min and max values.  :)\n\n2) Assuming we *do* want to support that, how about we use this API call to get the possible instance types and use that here?\n\nhttps://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2/client/get_instance_types_from_instance_requirements.html",
      "parentUuid": "9e9a8a92_3d2ea6bb",
      "revId": "cf34a3a30b4a5b942d727459d2650f8ae3b3e067",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ace2a176_3833b672",
        "filename": "nodepool/driver/aws/adapter.py",
        "patchSetId": 9
      },
      "lineNbr": 766,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-20T15:07:06Z",
      "side": 1,
      "message": "Two questions about that:\n1) Should we actually support instance-requirements?  We don\u0027t do anything like that right now with aws single instances.  But we do have something like that for openstack single instances.  But I\u0027m not sure we should, because if someone isn\u0027t careful, they could end up getting a surprise bill if aws adds a new expensive instance-type that meets your criteria.  So one should always include min and max values.  :)\n\n2) Assuming we *do* want to support that, how about we use this API call to get the possible instance types and use that here?\n\nhttps://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2/client/get_instance_types_from_instance_requirements.html",
      "parentUuid": "9e9a8a92_3d2ea6bb",
      "revId": "cf34a3a30b4a5b942d727459d2650f8ae3b3e067",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c652245_49425cbc",
        "filename": "nodepool/driver/statemachine.py",
        "patchSetId": 9
      },
      "lineNbr": 131,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-15T16:18:47Z",
      "side": 1,
      "message": "In this line, we\u0027re storing the actual quota resources used by the node -- but only based on the label because we haven\u0027t actually launched it yet.\n\nBut if we do this again below in updateNodeFromInstance, where you\u0027ve stored the instance type, then we would have the actual final resources.\n\nIf we add a method to QuotaInformation to deserialize from the get_resources output, then we can reconstruct the resources from the node record given what we already have.  (See other note.)",
      "revId": "cf34a3a30b4a5b942d727459d2650f8ae3b3e067",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b15d4c16_81b5f2be",
        "filename": "nodepool/driver/statemachine.py",
        "patchSetId": 9
      },
      "lineNbr": 131,
      "author": {
        "id": 33134
      },
      "writtenOn": "2024-07-16T13:44:46Z",
      "side": 1,
      "message": "I think it is a good idea, instead of storing the `instance_type`, we can store the `resources` once the instance is launched. So that we do not add the addtional `instance_type` to the node object.\n\nTo avoid adding `instance_type` parameter to the `getQuotaForLabel()` in Adapter, we still need to pass in the actual `instance_type` in some way. I did a trick that and set the actual instance_type to a deepcopied label as a parameter.",
      "parentUuid": "0c652245_49425cbc",
      "revId": "cf34a3a30b4a5b942d727459d2650f8ae3b3e067",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71f20750_79dff0a2",
        "filename": "nodepool/driver/statemachine.py",
        "patchSetId": 9
      },
      "lineNbr": 131,
      "author": {
        "id": 33134
      },
      "writtenOn": "2024-07-18T12:42:33Z",
      "side": 1,
      "message": "An update to may previous comment: The trick to set the `instance_type` to the label would not work, because not all label contains `instance_type`. So I think we can not avoid adding new parameters to those functions.",
      "parentUuid": "b15d4c16_81b5f2be",
      "revId": "cf34a3a30b4a5b942d727459d2650f8ae3b3e067",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "211d2621_af3dc79b",
        "filename": "nodepool/driver/utils.py",
        "patchSetId": 9
      },
      "lineNbr": 372,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-07-15T16:18:47Z",
      "side": 1,
      "message": "This is the thing that requires all the changes to the adapter api.\n\nInstead of passing instance_type\u003dNone to everything, how about we see if node.resources exists, and if it does, skip this call to quotaNeededByLabel and instead deserialize the resources into a QuotaInformation object.  (See other note.)\n\nThat should let us delete almost every line in this patch with instance_type.",
      "revId": "cf34a3a30b4a5b942d727459d2650f8ae3b3e067",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4794602e_0bb40bc9",
        "filename": "nodepool/driver/utils.py",
        "patchSetId": 9
      },
      "lineNbr": 372,
      "author": {
        "id": 33134
      },
      "writtenOn": "2024-07-16T13:44:46Z",
      "side": 1,
      "message": "yep, I uploaded a patch with the changes. Please check the PatchSet 11.",
      "parentUuid": "211d2621_af3dc79b",
      "revId": "cf34a3a30b4a5b942d727459d2650f8ae3b3e067",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}