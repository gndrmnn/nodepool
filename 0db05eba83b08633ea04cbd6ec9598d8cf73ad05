{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2a0643b0_556ecd9c",
        "filename": "nodepool/driver/azure/adapter.py",
        "patchSetId": 1
      },
      "lineNbr": 665,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-03-08T15:11:01Z",
      "side": 1,
      "message": "It looks like we really need to get the managed identity by id.  So rather than fetch the list of identities, why don\u0027t we use the pattern we use with images.  So instead of implementing _listManagedIdentities, implement _getManagedIdentity like _getImage.  In a system with, say, 10 identities used by nodepool, it will be a little slower at first because we\u0027ll make 10 api calls.  But there should be no reason to expire them from the cache since the only thing we\u0027re using is the id, and that isn\u0027t going to change.  So once we perform a get for each one, we never have to do another request.  And in a system with 1000 managed identities, that will be much faster.\n\nOR (and this might be even better) you could do no validation of the managed identities at all.  For example, we ask users to provide a subnet id, and we don\u0027t check whether it exists or not, because azure will tell us that.  The same is true here too -- in line 671 we\u0027ll raise an exception if we can\u0027t find a managed ID.  But if we removed all this checking, then Azure will throw an error just a little later in line 684.\n\nAs long as we don\u0027t need any more information than the ID, I would recommend the second approach; it\u0027s much simpler.\n\nRegardless of which approach you take, we should update at least one of the tests to create a node with a user-assigned-identity so that we exercise the new code.",
      "revId": "0db05eba83b08633ea04cbd6ec9598d8cf73ad05",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eba8e41a_a334d4c8",
        "filename": "nodepool/driver/azure/adapter.py",
        "patchSetId": 1
      },
      "lineNbr": 665,
      "author": {
        "id": 36867
      },
      "writtenOn": "2024-03-08T15:51:07Z",
      "side": 1,
      "message": "Thanks for your quick comments James!\n\nI actually started off with your second (simpler) approach but quickly realised that the Compute API forces us to specify the User-assigned Managed Identity as ARM Resource ID: https://learn.microsoft.com/en-us/rest/api/compute/virtual-machines/create-or-update?view\u003drest-compute-2023-10-02\u0026tabs\u003dHTTP#virtualmachineidentity\n\nSo a fundamental limitation is that we need to build the ARM Resource ID of the identities we want to use. The ARM Resource Id of a User-assigned Managed Identity is composed of:\n\n* Subscription Id\n* Resource Group Id\n* User-assigned Managed Identity Name\n\nIt is pretty safe to assume that the subscription will be the same, but what about the Resource Group ... can we assume that all managed identities will be found in providers.[azure].resource-group or should we give the possibility to specify different resource groups as well? Something like this:\n\n```\n            user-assigned-identities:\n              - name: userManagedIdentity1\n                resource-group: rg-non-default1\n              - name: userManagedIdentity2\n```\n\n(Assume providers.[azure].resource-group if resource-group is omitted)",
      "parentUuid": "2a0643b0_556ecd9c",
      "revId": "0db05eba83b08633ea04cbd6ec9598d8cf73ad05",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14e537aa_938c454b",
        "filename": "nodepool/driver/azure/adapter.py",
        "patchSetId": 1
      },
      "lineNbr": 665,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-03-09T19:53:56Z",
      "side": 1,
      "message": "I think your second idea sounds good.  It mirrors how we handle subnets with {network: {resource-group: foo, network: bar}}\n\nAlso, I think it\u0027s better to use the resource-group + identity name rather than the identity client id, since the client id is randomly generated so the user would have to go look it up.  An alternative would be to ask the user to supply the ARM, which you can look up using the web ui in azure, but it\u0027s not as obvious, and I don\u0027t think we\u0027ve done that yet in nodepool, so this is better.\n\nSide note: we do perform validation that we can resolve the subnet by getting the network object from azure and then storing its id (rather than constructing the id blind).  But we perform that validation at startup rather than at instance creation time, so if there\u0027s a problem it\u0027s caught early.  I do still think it\u0027s okay to construct the user assigned identity ARM blind and catch the error at launch time, but if you did want to validate the ARM using a get call like I suggested earlier, you might consider doing it at startup right after we do that for the networks.  That would have the benefit of performing validation before any launches happen.\n\nI wrote a lot of extra info here; the only important part is the first sentence of this comment.  :)",
      "parentUuid": "eba8e41a_a334d4c8",
      "revId": "0db05eba83b08633ea04cbd6ec9598d8cf73ad05",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a565b35c_75b41564",
        "filename": "nodepool/driver/azure/adapter.py",
        "patchSetId": 1
      },
      "lineNbr": 665,
      "author": {
        "id": 36867
      },
      "writtenOn": "2024-03-11T13:26:38Z",
      "side": 1,
      "message": "Ok I think I got it right now - please check my PS2.\n\nThe only thing I left out was early validation of user managed identities. Although it makes perfect sense for subnets (which cannot be delete while you have VMs running in it), user identities can be deleted at any time.",
      "parentUuid": "14e537aa_938c454b",
      "revId": "0db05eba83b08633ea04cbd6ec9598d8cf73ad05",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a900897f_444e80af",
        "filename": "nodepool/driver/azure/azul.py",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 1
      },
      "writtenOn": "2024-03-09T19:53:56Z",
      "side": 1,
      "message": "If this stays, there\u0027s a later revision we might want to start with: 2023-01-31.",
      "range": {
        "startLine": 280,
        "startChar": 34,
        "endLine": 280,
        "endChar": 36
      },
      "revId": "0db05eba83b08633ea04cbd6ec9598d8cf73ad05",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74f7cc47_b8e90222",
        "filename": "nodepool/driver/azure/azul.py",
        "patchSetId": 1
      },
      "lineNbr": 280,
      "author": {
        "id": 36867
      },
      "writtenOn": "2024-03-11T13:26:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a900897f_444e80af",
      "range": {
        "startLine": 280,
        "startChar": 34,
        "endLine": 280,
        "endChar": 36
      },
      "revId": "0db05eba83b08633ea04cbd6ec9598d8cf73ad05",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543"
    }
  ]
}