{
  "comments": [
    {
      "key": {
        "uuid": "5a3905b3_c5f33009",
        "filename": "nodepool/nodepool.py",
        "patchSetId": 2
      },
      "lineNbr": 705,
      "author": {
        "id": 4146
      },
      "writtenOn": "2017-01-19T19:13:54Z",
      "side": 1,
      "message": "Note that this will return the list of images that the provider is configured to provide, the the list of images that the provider is currently able to provide. Pointing this out because the docstring uses the term \"available\" which I don\u0027t think is actually the case here.",
      "range": {
        "startLine": 705,
        "startChar": 8,
        "endLine": 705,
        "endChar": 53
      },
      "revId": "4f12a9116e5e312f3d0973c3ea86d95117420f55",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_287a0925",
        "filename": "nodepool/nodepool.py",
        "patchSetId": 2
      },
      "lineNbr": 705,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-19T19:20:24Z",
      "side": 1,
      "message": "My guess is we probably want to eventually alter this function to do what the docstring says.",
      "revId": "4f12a9116e5e312f3d0973c3ea86d95117420f55",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a3c09a3_18bfbf61",
        "filename": "nodepool/nodepool.py",
        "patchSetId": 2
      },
      "lineNbr": 735,
      "author": {
        "id": 16068
      },
      "writtenOn": "2017-01-18T06:14:42Z",
      "side": 1,
      "message": "just \"return num_requested + num_in_use \u003e provider_max\"?",
      "range": {
        "startLine": 733,
        "startChar": 8,
        "endLine": 735,
        "endChar": 20
      },
      "revId": "4f12a9116e5e312f3d0973c3ea86d95117420f55",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a3c09a3_33881c71",
        "filename": "nodepool/nodepool.py",
        "patchSetId": 2
      },
      "lineNbr": 777,
      "author": {
        "id": 16068
      },
      "writtenOn": "2017-01-18T06:14:42Z",
      "side": 1,
      "message": "I see this part on every exit of the function (and also in run).\n\nMaybe it makes sense to put request update and unlock into a resource manager or function decorator in order to guarantee all (future) exit paths of these functions automatically do this.",
      "range": {
        "startLine": 776,
        "startChar": 0,
        "endLine": 777,
        "endChar": 51
      },
      "revId": "4f12a9116e5e312f3d0973c3ea86d95117420f55",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a3c09a3_6fad459a",
        "filename": "nodepool/nodepool.py",
        "patchSetId": 2
      },
      "lineNbr": 777,
      "author": {
        "id": 3099
      },
      "writtenOn": "2017-01-18T12:31:58Z",
      "side": 1,
      "message": "We cannot do that because we do not always want to unlock after an update (see the example code where we set PENDING a few lines below).",
      "parentUuid": "7a3c09a3_33881c71",
      "range": {
        "startLine": 776,
        "startChar": 0,
        "endLine": 777,
        "endChar": 51
      },
      "revId": "4f12a9116e5e312f3d0973c3ea86d95117420f55",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a3c09a3_4185bdcc",
        "filename": "nodepool/nodepool.py",
        "patchSetId": 2
      },
      "lineNbr": 777,
      "author": {
        "id": 3099
      },
      "writtenOn": "2017-01-18T12:51:03Z",
      "side": 1,
      "message": "It\u0027s also possible I initially misunderstood your suggestion. :)  I now think you\u0027re suggesting decorating these two methods to make certain the lock is released. That might be a good idea if I end up with more methods that rely on that happening. I don\u0027t think it\u0027s worth it for 2 methods, ATM.",
      "parentUuid": "7a3c09a3_6fad459a",
      "range": {
        "startLine": 776,
        "startChar": 0,
        "endLine": 777,
        "endChar": 51
      },
      "revId": "4f12a9116e5e312f3d0973c3ea86d95117420f55",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_c5441076",
        "filename": "nodepool/tests/test_zk.py",
        "patchSetId": 2
      },
      "lineNbr": 482,
      "author": {
        "id": 4146
      },
      "writtenOn": "2017-01-19T19:13:54Z",
      "side": 1,
      "message": "Maybe we shoudl consider a consistent serialize() method on these? Or maybe rely on str(some_obj) python magic to get us what we want? just thinking that its a bit clunky and potentially error prone to have to jump through multiple type conversions to get what we want.",
      "range": {
        "startLine": 482,
        "startChar": 36,
        "endLine": 482,
        "endChar": 72
      },
      "revId": "4f12a9116e5e312f3d0973c3ea86d95117420f55",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_e887210d",
        "filename": "nodepool/tests/test_zk.py",
        "patchSetId": 2
      },
      "lineNbr": 482,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-19T19:20:24Z",
      "side": 1,
      "message": "I like the idea of using __str__.\n\nclient.create(path, value\u003dstr(node)).  or maybe even client.create(path, value\u003dnode) would work?",
      "revId": "4f12a9116e5e312f3d0973c3ea86d95117420f55",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_889bfdc8",
        "filename": "nodepool/zk.py",
        "patchSetId": 2
      },
      "lineNbr": 450,
      "author": {
        "id": 4146
      },
      "writtenOn": "2017-01-19T19:13:54Z",
      "side": 1,
      "message": "This made me realize that we probably can\u0027t currenlty have node or image names like: ubuntu/trusty and ubuntu/xenial. Is that something maybe we should escape properly so that they are valid?",
      "revId": "4f12a9116e5e312f3d0973c3ea86d95117420f55",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3905b3_087d4d1c",
        "filename": "nodepool/zk.py",
        "patchSetId": 2
      },
      "lineNbr": 450,
      "author": {
        "id": 1
      },
      "writtenOn": "2017-01-19T19:20:24Z",
      "side": 1,
      "message": "We probably should either escape all the operator-provided names or reject \u0027/\u0027.",
      "revId": "4f12a9116e5e312f3d0973c3ea86d95117420f55",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}